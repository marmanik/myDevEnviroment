{"mode":"editor","version":1,"windowDimensions":{"x":9,"y":8,"width":1438,"height":871,"maximized":false},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/home/gsmyrnaios/dev/projects/atlas_reporting"],"buffers":[{"text":"package velti.tech.reporting.web.rest;\n\nimport org.apache.log4j.Logger;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry;\nimport org.springframework.context.annotation.ClassPathBeanDefinitionScanner;\nimport org.springframework.core.type.filter.AssignableTypeFilter;\nimport org.springframework.core.type.filter.TypeFilter;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.web.bind.annotation.*;\nimport velti.tech.reporting.schedule.domain.Schedule;\nimport velti.tech.reporting.schedule.domain.ScheduleFilter;\nimport velti.tech.reporting.schedule.domain.ScheduleType;\nimport velti.tech.reporting.schedule.domain.ScheduledEntityType;\nimport velti.tech.reporting.schedule.service.IScheduleService;\nimport velti.tech.reporting.system.util.Utilities;\nimport velti.tech.reporting.web.cron.Cron;\nimport velti.tech.reporting.web.cron.api.DayBasedCronExpression;\nimport velti.tech.reporting.web.cron.api.QuartzExpressionBuilder;\nimport velti.tech.reporting.web.security.util.AuthoritiesConstants;\n\nimport javax.validation.Valid;\nimport java.net.URISyntaxException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/secured\")\n@Secured(AuthoritiesConstants.ADMIN)\npublic class ScheduleResource {\n\n    private static final Logger LOGGER = Logger.getLogger(ScheduleResource.class);\n\n    @Autowired\n    private IScheduleService scheduleService;\n\n    /**\n     * GET /schedule/cron -> get cron expression\n     */\n    @RequestMapping(value = \"/schedule/cron\", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public Cron getCron(@RequestParam(\"type\") ScheduleType type, @RequestParam(\"hour\") int hour, @RequestParam(\"minute\") int minute, @RequestParam(\"interval\") int interval) {\n        Cron cron = new Cron();\n        switch (type) {\n            case DAILY: {\n                QuartzExpressionBuilder builder = new QuartzExpressionBuilder();\n                DayBasedCronExpression exp = builder.makeDayBasedExpression();\n                exp.setInterval(interval);\n                exp.setTime(hour, minute);\n                exp.setForEveryDay();\n                String cronExp = exp.getCronExpression();\n                cron.setCronExpression(cronExp);\n                cron.setNextDates(builder.calcNextDates(cronExp, new Date(), 10));\n                return cron;\n            }\n            case HOURLY:\n                throw new IllegalArgumentException(\"NOT YET SUPPORTED\");\n            case MONTHLY:\n                throw new IllegalArgumentException(\"NOT YET SUPPORTED\");\n        }\n\n        return cron;\n\n    }\n\n    /**\n     * GET all /schedule -> get all active Schedule.\n     */\n    @RequestMapping(value = \"/schedule/active/{projectId}\", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public List<Schedule> findAllActive(@PathVariable Long projectId) {\n        return scheduleService.loadSchedules(new ScheduleFilter.Builder().projectId(projectId).active(Boolean.TRUE).build());\n    }\n\n    /**\n     * GET all /schedule -> get all active Schedule.\n     */\n    @RequestMapping(value = \"/schedule/{projectId}\", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public List<Schedule> findAll(@PathVariable Long projectId) {\n        return scheduleService.loadSchedules(new ScheduleFilter.Builder().projectId(projectId).build());\n    }\n\n    /**\n     * GET by id /schedule -> get schedule by ID.\n     */\n    @RequestMapping(value = \"/schedule/{entityId}/{entityType}\", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public Schedule findById(@PathVariable(value = \"entityId\") long entityId, @PathVariable(value = \"entityType\") ScheduledEntityType entityType) {\n        return scheduleService.loadSchedule(entityId, entityType);\n    }\n\n\n    /**\n     * GET by id /schedule/runners -> get runners class names\n     */\n    @RequestMapping(value = \"/schedule/runners\", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public List<String> findRunners() {\n        List<String> runnerClassList = new ArrayList<>();\n        BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry();\n        ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(registry);\n        TypeFilter typeFilter = new AssignableTypeFilter(velti.tech.reporting.engine.runner.domain.Runner.class);\n        scanner.setIncludeAnnotationConfig(false);\n        scanner.resetFilters(false);\n        scanner.addIncludeFilter(typeFilter);\n        scanner.scan(\"velti.tech.reporting\");\n        String[] beans = registry.getBeanDefinitionNames();\n        for (String bean : beans){\n            runnerClassList.add(registry.getBeanDefinition(bean).getBeanClassName());\n        }\n\n        return runnerClassList;\n    }\n\n\n\n    /**\n     * POST  /schedule -> Create a new schedule.\n     */\n    @RequestMapping(value = \"/schedule\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<?> create(@Valid @RequestBody Schedule schedule) throws URISyntaxException {\n        LOGGER.info(String.format(\"REST request to save schedule : %s\", schedule));\n        Schedule checkSchedule = scheduleService.loadSchedule(schedule.getEntityId(), schedule.getScheduledEntityType());\n        if (!Utilities.isEmpty(checkSchedule)) {\n            List<String> list = new ArrayList<>();\n            list.add(\"entityId\");\n            list.add(\"entityType\");\n            return new ResponseEntity<>(list, HttpStatus.BAD_REQUEST);\n        }\n        scheduleService.insertSchedule(schedule);\n        return new ResponseEntity<>(HttpStatus.CREATED);\n    }\n\n\n    /**\n     * PUT  /schedule -> Updates an existing schedule.\n     */\n    @RequestMapping(value = \"/schedule\", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<?> update(@Valid @RequestBody Schedule schedule) throws URISyntaxException {\n        LOGGER.info(String.format(\"REST request to update schedule : %s\", schedule));\n        scheduleService.updateSchedule(schedule.getEntityId(), schedule.getScheduledEntityType(), schedule);\n        return new ResponseEntity<>(HttpStatus.CREATED);\n    }\n\n    /**\n     * PUT  /schedule/reset -> Updates an existing schedule.\n     */\n    @RequestMapping(value = \"/schedule/reset/{entityId}\", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Void> reset(@PathVariable(value = \"entityId\") long entityId) throws URISyntaxException {\n        LOGGER.info(String.format(\"REST request to reset schedule : %s\", entityId));\n        scheduleService.clearScheduleStatus(entityId);\n        return ResponseEntity.ok().build();\n    }\n\n\n    /**\n     * PUT  /schedule/disable_enable -> Updates an existing schedule disable_enable.\n     */\n    @RequestMapping(value = \"/schedule/disable/{id}\", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Void> disable(@PathVariable(value = \"id\") long id) throws URISyntaxException {\n        LOGGER.info(String.format(\"REST request to update schedule disable : %s\", id));\n        scheduleService.disableSchedule(id);\n        return ResponseEntity.ok().build();\n    }\n\n    /**\n     * PUT  /schedule/disable_enable -> Updates an existing schedule disable_enable.\n     */\n    @RequestMapping(value = \"/schedule/enable/{id}\", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<Void> enable(@PathVariable(value = \"id\") long id) throws URISyntaxException {\n        LOGGER.info(String.format(\"REST request to update schedule enable : %s\", id));\n        scheduleService.enableSchedule(id);\n        return ResponseEntity.ok().build();\n    }\n\n\n    /**\n     * DELETE  /schedule/:entityId/:entityType -> delete the \"entityId\" schedule.\n     */\n    @RequestMapping(value = \"/schedule/{id}\", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)\n    public void delete(@PathVariable(value = \"id\") long id) {\n        scheduleService.deleteScheduleById(id);\n    }\n\n}\n","markerStore":{"nextMarkerId":17,"markersById":{"0":{"range":{"start":{"row":36,"column":28},"end":{"row":36,"column":28}},"properties":{"type":"selection","editorId":96,"goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":2,"undoStack":[{"type":"group-start","snapshot":{"0":{"range":[[36,13],[36,28]],"properties":{"type":"selection","editorId":96,"goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[12,0],[12,0]],"newRange":[[12,0],[13,0]],"oldText":"","newText":"import org.springframework.security.access.annotation.Secured;\n"}},{"type":"change","content":{"oldRange":[[23,0],[23,0]],"newRange":[[23,0],[24,0]],"oldText":"","newText":"import velti.tech.reporting.web.security.util.AuthoritiesConstants;\n"}},{"type":"change","content":{"oldRange":[[33,0],[33,0]],"newRange":[[33,0],[34,0]],"oldText":"","newText":"@Secured(AuthoritiesConstants.ADMIN)\n"}},{"type":"group-end","snapshot":{"0":{"range":[[39,13],[39,28]],"properties":{"type":"selection","editorId":96,"goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}}],"redoStack":[]},"encoding":"utf8","filePath":"/home/gsmyrnaios/dev/projects/atlas_reporting/atlas-admin/src/main/java/velti/tech/reporting/web/rest/ScheduleResource.java","digestWhenLastPersisted":"523f4cc9fdf44cbad3e2549ddf12e02b9d08f35a","preferredLineEnding":null,"deserializer":"TextBuffer","version":2}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":96,"softTabs":true,"scrollRow":9,"displayBuffer":{"deserializer":"DisplayBuffer","id":97,"softWrapped":true,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/home/gsmyrnaios/dev/projects/atlas_reporting/atlas-admin/src/main/java/velti/tech/reporting/web/rest/ScheduleResource.java","largeFileMode":false},"largeFileMode":false}}],"activeItemURI":"/home/gsmyrnaios/dev/projects/atlas_reporting/atlas-admin/src/main/java/velti/tech/reporting/web/rest/ScheduleResource.java","focused":true,"flexScale":1},"activePaneId":3},"fullScreen":false,"packagesWithActiveGrammars":["language-java","language-hyperlink","language-todo"]},"packageStates":{"find-and-replace":{"findOptions":{"findPattern":"scheduleService","replacePattern":"","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":["scheduleService"],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/home/gsmyrnaios/dev/projects/atlas_reporting/atlas-admin/src/main/java/velti/tech/reporting/web/rest/ScheduleResource.java":1446822328285},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/home/gsmyrnaios/dev/projects/atlas_reporting":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},".idea":{"isExpanded":false,"entries":{}},"atlas-admin":{"isExpanded":true,"entries":{"src":{"isExpanded":true,"entries":{"main":{"isExpanded":true,"entries":{"java":{"isExpanded":true,"entries":{"velti":{"isExpanded":true,"entries":{"tech":{"isExpanded":true,"entries":{"reporting":{"isExpanded":true,"entries":{"web":{"isExpanded":true,"entries":{"config":{"isExpanded":false,"entries":{}},"controller":{"isExpanded":false,"entries":{}},"cron":{"isExpanded":false,"entries":{}},"dto":{"isExpanded":false,"entries":{}},"mail":{"isExpanded":false,"entries":{}},"rest":{"isExpanded":true,"entries":{}},"security":{"isExpanded":false,"entries":{}},"websocket":{"isExpanded":false,"entries":{}}}}}}}}}}}},"resources":{"isExpanded":false,"entries":{}},"webapp":{"isExpanded":false,"entries":{}}}},"test":{"isExpanded":false,"entries":{}}}},"target":{"isExpanded":false,"entries":{}}}},"atlas-core":{"isExpanded":true,"entries":{"src":{"isExpanded":true,"entries":{"main":{"isExpanded":true,"entries":{"java":{"isExpanded":true,"entries":{"velti":{"isExpanded":true,"entries":{"tech":{"isExpanded":true,"entries":{"reporting":{"isExpanded":true,"entries":{"commons":{"isExpanded":false,"entries":{}},"config":{"isExpanded":false,"entries":{}},"dashboards":{"isExpanded":false,"entries":{}},"dataset":{"isExpanded":false,"entries":{}},"engine":{"isExpanded":false,"entries":{}},"etl":{"isExpanded":false,"entries":{}},"hdp":{"isExpanded":false,"entries":{}},"project":{"isExpanded":false,"entries":{}},"schedule":{"isExpanded":true,"entries":{"config":{"isExpanded":false,"entries":{}},"dao":{"isExpanded":false,"entries":{}},"domain":{"isExpanded":false,"entries":{}},"service":{"isExpanded":true,"entries":{}}}},"system":{"isExpanded":false,"entries":{}}}}}}}}}},"resources":{"isExpanded":false,"entries":{}}}},"test":{"isExpanded":true,"entries":{"java":{"isExpanded":false,"entries":{}},"resources":{"isExpanded":false,"entries":{}}}}}},"target":{"isExpanded":false,"entries":{}}}},"atlas-domain-generator":{"isExpanded":false,"entries":{}},"atlas-etl-talend":{"isExpanded":false,"entries":{}},"atlas-inspire-plugin":{"isExpanded":false,"entries":{}},"atlas-lsc-plugin":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/home/gsmyrnaios/dev/projects/atlas_reporting/atlas-core/src/main/java/velti/tech/reporting/schedule/service","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":740,"width":553}}}